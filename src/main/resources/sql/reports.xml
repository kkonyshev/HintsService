<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

    <comment>Reports</comment>

    <entry key="profitReport">
        <![CDATA[
SELECT
  'FLOWER'                                               AS type,
  t1.name                                                AS strain,
  t1.option_name                                         AS 'option',
  t1.tier_name                                           AS tier,
  t2.cost,
  t2.grams,
  t1.profit,
  t1.revenue,
  if((t1.profit - t2.cost) / t2.grams <= 0, 0,
     (t1.profit - t2.cost) / t2.grams)                   AS profit_per_gram,
  if(t1.revenue - t2.cost <= 0, 0, t1.revenue - t2.cost) AS net_profit
FROM
  (SELECT
     sum(tl.priceSell * tl.amount * (1 + tl.taxRate)) AS profit,
     sum(tl.priceSell * tl.amount)                    AS revenue,
     ty.name                                          AS name,
     op.name                                          AS option_name,
     tier.tier_name,
     ca2.id
   FROM posper_ticketline tl, posper_ticket ti, posper_product pr, posper_category ca1, posper_category ca2,
     im_strain_type ty, im_strain_tier tier, im_strain_category_option co LEFT JOIN im_strain_option op
       ON op.id = co.option_id
   WHERE date(ti.dateClose) >= :startDate AND date(ti.dateClose) <= :endDate
         AND co.category_id = ca2.id AND ca1.parent_id = ca2.id AND tl.ticket_ticketline = ti.id AND
         tl.product_id = pr.id
         AND pr.category_id = ca1.id AND ty.posper_category_id = ca1.id AND ty.im_strain_tier_id = tier.id
   GROUP BY ty.name, tier.tier_name) t1 LEFT JOIN
  (SELECT
     ty.name,
     ti.tier_name,
     sum(-1 * st.units * dt.cost_per_gram * dt.grams_per_jar) AS cost,
     sum(-1 * st.units * dt.grams_per_jar)                    AS grams
   FROM im_strain_detail dt, posper_stockdiary st, posper_product pr, posper_category ca, im_strain_type ty,
     im_strain_tier ti
   WHERE dt.id = st.im_strain_detail_id AND st.product_id = pr.id AND pr.category_id = ca.id AND
         ty.posper_category_id = ca.id AND ty.im_strain_tier_id = ti.id
         AND st.reason IN (-6, 6, -8, 8) AND date(st.date) >= :startDate AND date(st.date) <= :endDate
   GROUP BY ty.name, ti.tier_name) t2
    ON t1.name = t2.name AND t1.tier_name = t2.tier_name
UNION ALL
SELECT
  'MISC'                                                 AS type,
  t1.name                                                AS strain,
  t1.option_name                                         AS 'option',
  t1.tier_name                                           AS tier,
  t2.cost,
  t2.grams,
  t1.profit,
  t1.revenue,
  if((t1.profit - t2.cost) / t2.grams <= 0, 0,
     (t1.profit - t2.cost) / t2.grams)                   AS profit_per_gram,
  if(t1.revenue - t2.cost <= 0, 0, t1.revenue - t2.cost) AS net_profit
FROM
  (SELECT
     sum(tl.priceSell * tl.amount * (1 + tl.taxRate)) AS profit,
     sum(tl.priceSell * tl.amount)                    AS revenue,
     pr.description                                   AS name,
     ''                                               AS option_name,
     ''                                               AS tier_name
   FROM posper_ticketline tl, posper_ticket ti, posper_product pr, posper_category ca
   WHERE tl.ticket_ticketline = ti.id AND tl.product_id = pr.id AND pr.category_id = ca.id AND
         pr.id IN ('shake35', 'crumb35')
         AND date(ti.dateClose) >= :startDate AND date(ti.dateClose) <= :endDate
   GROUP BY pr.id) t1 LEFT JOIN
  (SELECT
     pr.description                                           AS name,
     ''                                                       AS tier_name,
     sum(-1 * st.units * dt.cost_per_gram * dt.grams_per_jar) AS cost,
     sum(-1 * st.units * dt.grams_per_jar)                    AS grams
   FROM im_strain_detail dt, posper_stockdiary st, posper_product pr, posper_category ca
   WHERE dt.id = st.im_strain_detail_id AND st.product_id = pr.id AND pr.category_id = ca.id
         AND pr.id IN ('shake35', 'crumb35') AND st.reason IN (-6, 6, -8, 8) AND date(st.date) >= :startDate AND
         date(st.date) <= :endDate
   GROUP BY pr.id) t2
    ON t1.name = t2.name
UNION ALL
SELECT
  'EXTRACT'                                              AS type,
  t1.name                                                AS strain,
  t1.option_name                                         AS 'option',
  t1.tier_name                                           AS tier,
  t2.cost,
  t2.grams,
  t1.profit,
  t1.revenue,
  if((t1.profit - t2.cost) / t2.grams <= 0, 0,
     (t1.profit - t2.cost) / t2.grams)                   AS profit_per_gram,
  if(t1.revenue - t2.cost <= 0, 0, t1.revenue - t2.cost) AS net_profit
FROM
  (SELECT
     sum(tl.priceSell * tl.amount * (1 + tl.taxRate)) AS profit,
     sum(tl.priceSell * tl.amount)                    AS revenue,
     ty.name                                          AS name,
     op.name                                          AS option_name,
     tier.tier                                        AS tier_name,
     ca2.id
   FROM posper_ticketline tl, posper_ticket ti, posper_product pr, posper_category ca1, posper_category ca2,
     im_strain_extract_type ty, im_strain_extract_cost tier, im_strain_category_option co LEFT JOIN im_strain_option op
       ON op.id = co.option_id
   WHERE co.category_id = ca2.id AND ca1.parent_id = ca2.id AND tl.ticket_ticketline = ti.id AND tl.product_id = pr.id
         AND pr.category_id = ca1.id AND ty.category_id = ca1.id AND ty.extract_cost_id = tier.id
         AND date(ti.dateClose) >= :startDate AND date(ti.dateClose) <= :endDate
   GROUP BY ty.name, tier.tier) t1 LEFT JOIN
  (SELECT
     ty.name,
     ti.tier                                                  AS tier_name,
     sum(-1 * st.units * dt.cost_per_gram * dt.grams_per_jar) AS cost,
     sum(-1 * st.units * dt.grams_per_jar)                    AS grams
   FROM im_strain_detail dt, posper_stockdiary st, posper_product pr, posper_category ca, im_strain_extract_type ty,
     im_strain_extract_cost ti
   WHERE
     dt.id = st.im_strain_detail_id AND st.product_id = pr.id AND pr.category_id = ca.id AND ty.category_id = ca.id AND
     ty.extract_cost_id = ti.id
     AND st.reason IN (-6, 6, -8, 8) AND date(st.date) >= :startDate AND date(st.date) <= :endDate
   GROUP BY ty.name, ti.tier) t2
    ON t1.name = t2.name AND t1.tier_name = t2.tier_name;
        ]]>
    </entry>

    <entry key="stockReport">
        <![CDATA[
SELECT
  'FLOWER'                              AS type,
  name                                  AS strain,
  option_name                           AS 'option',
  tier_name                             AS tier,
  grams_per_jar                         AS grams_per_jar,
  units                                 AS unite,
  units * grams_per_jar                 AS total_grams,
  units * grams_per_jar * cost_per_gram AS total_cost,
  cost_per_gram
FROM
  (SELECT
     st.product_id,
     pr.weight                  AS grams_per_jar,
     sum(st.units)              AS units,
     ti.tier_name,
     ty.name,
     op.name                    AS option_name,
     ca2.id                     AS category_id,
     iv.cost / iv.ending_weight AS cost_per_gram
   FROM (SELECT *
         FROM (
                SELECT *
                FROM im_strain_inventory
                ORDER BY start_datetime DESC) t1
         GROUP BY im_strain_type_id) iv, posper_stockdiary st, posper_product pr, posper_category ca1,
     posper_category ca2, im_strain_type ty, im_strain_tier ti,
     im_strain_category_option co LEFT JOIN im_strain_option op
       ON op.id = co.option_id
   WHERE iv.im_strain_type_id = ty.id AND co.category_id = ca2.id AND ca1.parent_id = ca2.id
         AND pr.id = st.product_id AND pr.category_id = ca1.id AND ca1.id = ty.posper_category_id AND
         ti.id = ty.im_strain_tier_id AND ty.active = 1
         AND date(st.date) <= :date
   GROUP BY st.product_id) t2
WHERE units > 0
UNION ALL
SELECT
  'MISC'                                         AS type,
  category_name                                  AS strain,
  ''                                             AS 'option',
  ''                                             AS tier,
  grams_per_jar                                  AS grams_per_jar,
  units                                          AS units,
  units * grams_per_jar                          AS total_grams,
  total_cost,
  round(total_cost / (units * grams_per_jar), 2) AS cost_per_gram
FROM (
       SELECT
         pr.id,
         concat(ca.category_name, 'S - 3.5 GRAM JARS')              AS category_name,
         dt.grams_per_jar,
         if(sum(dt.cost_per_gram * st.units * dt.grams_per_jar) >= 0,
            sum(dt.cost_per_gram * st.units * dt.grams_per_jar), 0) AS total_cost
       FROM posper_stockdiary st, im_strain_detail dt, posper_product pr, posper_category ca
       WHERE st.im_strain_detail_id = dt.id AND st.product_id = pr.id AND pr.category_id = ca.id AND
             pr.id IN ('crumb35', 'shake35')
       GROUP BY st.product_id) t1 JOIN
  (SELECT
     st.product_id,
     sum(st.units) AS units
   FROM posper_stockdiary st, posper_product pr, posper_category ca
   WHERE
     pr.id = st.product_id AND pr.category_id = ca.id AND pr.id IN ('crumb35', 'shake35') AND date(st.date) <= :date
   GROUP BY st.product_id) t2
    ON t1.id = t2.product_id
WHERE units > 0
UNION ALL
SELECT
  'EXTRACT'                             AS type,
  name                                  AS strain,
  option_name                           AS 'option',
  tier_name                             AS tier,
  grams_per_jar                         AS grams_per_jar,
  units                                 AS units,
  units * grams_per_jar                 AS total_grams,
  units * grams_per_jar * cost_per_gram AS total_cost,
  cost_per_gram
FROM
  (SELECT
     st.product_id,
     pr.weight                   AS grams_per_jar,
     sum(st.units)               AS units,
     ti.tier                     AS tier_name,
     ty.name,
     op.name                     AS option_name,
     ca2.id                      AS category_id,
     ex.cost / ex.starting_grams AS cost_per_gram
   FROM (SELECT *
         FROM (
                SELECT *
                FROM im_strain_extracts
                ORDER BY start_datetime DESC) t1
         GROUP BY extract_type_id) ex, posper_stockdiary st, posper_product pr, posper_category ca1,
     posper_category ca2, im_strain_extract_type ty, im_strain_extract_cost ti,
     im_strain_category_option co LEFT JOIN im_strain_option op
       ON op.id = co.option_id
   WHERE ex.extract_type_id = ty.id AND co.category_id = ca2.id AND ca1.parent_id = ca2.id
         AND pr.id = st.product_id AND pr.category_id = ca1.id AND ca1.id = ty.category_id AND
         ti.id = ty.extract_cost_id AND ty.active = 1
         AND date(st.date) <= :date
   GROUP BY st.product_id) t2
WHERE units > 0
ORDER BY strain, 'option', tier DESC, grams_per_jar DESC;
        ]]>
    </entry>

    <entry key="salesReport">
        <![CDATA[
SELECT
  'FLOWER'                                                                          AS type,
  ty.name                                                                           AS strain,
  op.name                                                                           AS 'option',
  tier.tier_name                                                                    AS tier,
  sum(tl.priceSell * tl.amount * (1 + tl.taxRate))                                  AS gross,
  sum(tl.priceSell * tl.amount)                                                     AS net,
  sum(tl.priceSell * tl.amount * tl.taxRate)                                        AS tax,
  sum((pr.priceSell * (1 + ta.rate) - tl.priceSell * (1 + tl.taxRate)) * tl.amount) AS discount,
  sum(tl.orig_tax)                                                                  AS usage_tax
FROM posper_ticketline tl, posper_ticket ti, posper_product pr, posper_category ca1, posper_category ca2,
  im_strain_type ty, im_strain_tier tier, posper_tax ta, im_strain_category_option co LEFT JOIN im_strain_option op
    ON op.id = co.option_id
WHERE date(ti.dateClose) >= :startDate AND date(ti.dateClose) <= :endDate
      AND co.category_id = ca2.id AND ca1.parent_id = ca2.id AND tl.ticket_ticketline = ti.id AND tl.product_id = pr.id
      AND pr.category_id = ca1.id AND ty.posper_category_id = ca1.id AND ty.im_strain_tier_id = tier.id AND ta.id = 1
GROUP BY ty.name, tier.tier_name
UNION ALL
SELECT
  'MISC'                                                                            AS type,
  pr.description                                                                    AS strain,
  ''                                                                                AS 'option',
  ''                                                                                AS tier,
  sum(tl.priceSell * tl.amount * (1 + tl.taxRate))                                  AS gross,
  sum(tl.priceSell * tl.amount)                                                     AS net,
  sum(tl.priceSell * tl.amount * tl.taxRate)                                        AS tax,
  sum((pr.priceSell * (1 + ta.rate) - tl.priceSell * (1 + tl.taxRate)) * tl.amount) AS discount,
  sum(tl.orig_tax)                                                                  AS usage_tax
FROM posper_ticketline tl, posper_ticket ti, posper_product pr, posper_category ca, posper_tax ta
WHERE date(ti.dateClose) >= :startDate AND date(ti.dateClose) <= :endDate AND
      tl.ticket_ticketline = ti.id AND tl.product_id = pr.id AND pr.category_id = ca.id AND
      pr.id IN ('shake35', 'crumb35') AND ta.id = 1
GROUP BY pr.id
UNION ALL
SELECT
  'EXTRACT'                                                                         AS type,
  ty.name                                                                           AS strain,
  op.name                                                                           AS 'option',
  tier.tier                                                                         AS tier,
  sum(tl.priceSell * tl.amount * (1 + tl.taxRate))                                  AS gross,
  sum(tl.priceSell * tl.amount)                                                     AS net,
  sum(tl.priceSell * tl.amount * tl.taxRate)                                        AS tax,
  sum((pr.priceSell * (1 + ta.rate) - tl.priceSell * (1 + tl.taxRate)) * tl.amount) AS discount,
  sum(tl.orig_tax)                                                                  AS usage_tax
FROM posper_ticketline tl, posper_ticket ti, posper_product pr, posper_category ca1, posper_category ca2,
  im_strain_extract_type ty, im_strain_extract_cost tier, posper_tax ta,
  im_strain_category_option co LEFT JOIN im_strain_option op
    ON op.id = co.option_id
WHERE date(ti.dateClose) >= :startDate AND date(ti.dateClose) <= :endDate AND
co.category_id = ca2.id AND ca1.parent_id = ca2.id AND tl.ticket_ticketline = ti.id AND tl.product_id = pr.id
AND pr.category_id = ca1.id AND ty.category_id = ca1.id AND ty.extract_cost_id = tier.id AND ta.id = 1
GROUP BY ty.name, tier.tier;
        ]]>
    </entry>
    
    <entry key="paymentReport">
        <![CDATA[
SELECT
  :type                                                              AS type,
  CASE
  WHEN 'CASH' = :type
    THEN
      sum(cash)
  WHEN 'CASHLESS_ATM' = :type
    THEN sum(cashless_atm) END                                       AS cash,
  CASE
  WHEN 'CASH' = :type
    THEN
      sum(cash) - (sum(cash) / (1 + ta.rate))
  WHEN 'CASHLESS_ATM' = :type
    THEN sum(cashless_atm) - (sum(cashless_atm) / (1 + ta.rate)) END AS tax
FROM posper_tax ta, (SELECT
                       t4.id,
                       t4.visibleId,
                       t4.date,
                       t4.time,
                       t5.cash + t5.cashless_atm AS total,
                       t5.cash,
                       t5.cashless_atm,
                       t4.name,
                       t5.usage_tax
                     FROM (SELECT
                             ti.id,
                             ti.visibleId,
                             DATE(ti.dateClose) AS DATE,
                             TIME(ti.dateClose) AS TIME,
                             upper(us.name)     AS NAME
                           FROM posper_ticket ti, posper_user us
                           WHERE ti.dateClose IS NOT NULL AND us.id = ti.userid
                                 AND DATE(ti.dateClose) >= :startDate AND DATE(ti.dateClose) <= :endDate) t4 JOIN
                       (SELECT
                          t1.id,
                          t1.visibleId,
                          total - cashless_atm AS cash,
                          cashless_atm,
                          usage_tax
                        FROM
                          (SELECT
                             ti.id,
                             ti.visibleId,
                             sum(tl.priceSell * tl.amount * (1 + ta.rate)) AS total,
                             sum(orig_tax)                                 AS usage_tax
                           FROM posper_tax ta, posper_ticket ti LEFT JOIN posper_ticketline tl
                               ON tl.ticket_ticketline = ti.id
                           WHERE ti.dateClose IS NOT NULL AND ta.id = 1 AND DATE(ti.dateClose) >= :startDate AND
                                 DATE(ti.dateClose) <= :endDate
                           GROUP BY ti.visibleId) t1 JOIN
                          (SELECT
                             id,
                             visibleId,
                             IF(sum(cash) IS NULL, 0, sum(cash)) + IF(sum(refund) IS NULL, 0, sum(refund)) AS cash,
                             IF(sum(cashless_atm) IS NULL, 0, sum(
                                 cashless_atm))                                                            AS cashless_atm
                           FROM (
                                  SELECT
                                    ti.id,
                                    ti.visibleId,
                                    CASE WHEN pa.method = 'cash'
                                      THEN pa.amount END AS cash,
                                    CASE WHEN pa.method = 'cheque'
                                      THEN pa.amount END AS cashless_atm,
                                    CASE WHEN pa.method = 'cashrefund'
                                      THEN pa.amount END AS refund
                                  FROM posper_ticket ti, posper_payment pa
                                  WHERE ti.dateClose IS NOT NULL AND pa.ticket_id = ti.id
                                        AND DATE(ti.dateClose) >= :startDate AND DATE(ti.dateClose) <= :endDate) t2
                           GROUP BY visibleId) t3
                            ON t1.visibleId = t3.visibleId) t5
                         ON t4.visibleId = t5.visibleId
                     ORDER BY t4.time) t6
WHERE ta.id = 1;
        ]]>
    </entry>
    
    <entry key="cashCloseReport">
        <![CDATA[
SELECT
  cc.cashregister_id                                                                     AS register,
  if(date(cc.date_open) = :closeDate, time_format(cc.date_open, '%h:%i %p'), '09:00 AM') AS time_open,
  time_format(cc.date_close, '%h:%i %p')                                                 AS time_closed,
  cc.cash_expected                                                                       AS expected_cash,
  cc.cash_actual                                                                         AS actual_cash,
  cc.cash_difference                                                                     AS cash_difference,
  cc.cashless_atm_expected                                                               AS expected_debit,
  cc.cashless_atm_actual                                                                 AS actual_debit,
  if(cc.terminal LIKE '%1', (SELECT SUM(x.cashless_atm_actual)
                             FROM im_close_cash x
                             WHERE x.terminal LIKE '%1'
                                   AND date(x.date_close) = date(cc.date_close)
                                   AND x.location_id = cc.location_id
                                   AND x.id <= cc.id)
  , (SELECT SUM(x.cashless_atm_actual)
     FROM im_close_cash x
     WHERE x.terminal NOT LIKE '%1'
           AND date(x.date_close) = date(cc.date_close)
           AND x.location_id = cc.location_id
           AND x.id <= cc.id)
  )                                                                                      AS running_debit_sum,
  cc.cashless_atm_difference                                                             AS debit_difference,
  cc.total_expected                                                                      AS expected_total,
  cc.total_actual                                                                        AS actual_total,
  cc.total_difference                                                                    AS total_difference,
  upper(pu.name)                                                                         AS cashier,
  upper(concat(us.first_name, ' ', us.last_name))                                        AS manager
FROM im_close_cash cc
  LEFT JOIN tb_users us
    ON cc.user_id = us.id
  LEFT JOIN posper_user pu
    ON cc.mostsales_userid = pu.id
  LEFT JOIN (SELECT
               cashregister_id,
               sum(cash_drop) AS cash_drop
             FROM im_cash_drop
             GROUP BY cashregister_id) t1
    ON t1.cashregister_id = cc.cashregister_id
WHERE date(cc.date_close) = :closeDate
      AND cc.location_id = :restaurantId;
        ]]>
    </entry>

    <entry key="lossReport">
        <![CDATA[
SELECT
  'FLOWER'                                 AS type,
  ty.name                                  AS strain,
  op.name                                  AS 'option',
  ti.tier_name                             AS tier,
  dt.grams_per_jar                         AS grams_per_jar,
  sum(dt.quantity)                         AS jars_lost,
  sum(dt.total_grams)                      AS total_grams,
  sum(dt.total_cost)                       AS total_cost,
  sum(dt.total_cost) / sum(dt.total_grams) AS cost_per_gram
FROM im_strain_detail dt, im_strain_type ty, im_strain_tier ti, posper_product pr, posper_category ca1,
  posper_category ca2, im_strain_category_option co LEFT JOIN im_strain_option op
    ON op.id = co.option_id
WHERE ca1.parent_id = ca2.id AND co.category_id = ca2.id AND dt.posper_product_id = pr.id AND pr.category_id = ca1.id
      AND ty.posper_category_id = ca1.id AND ty.im_strain_tier_id = ti.id AND ty.active = 1 AND dt.ATTR1 = 'LOST'
      AND date(dt.start_date) >= :startDate AND date(dt.start_date) <= :endDate
GROUP BY ca2.id, ti.tier_name, dt.grams_per_jar
UNION ALL
SELECT
  'MISC'           AS type,
  ''               AS strain,
  ''               AS 'option',
  t2.name          AS tier,
  t2.grams_per_jar AS grams_per_jar,
  t2.jars_lost     AS jars_lost,
  t2.total_grams   AS total_grams,
  t2.total_cost    AS total_cost,
  t2.cost_per_gram AS cost_per_gram
FROM (SELECT
        if(dt.posper_product_id = 'shake35', 'SHAKE', 'CRUMB') AS name,
        sum(dt.total_grams)                                    AS total_grams,
        dt.grams_per_jar                                       AS grams_per_jar,
        sum(dt.quantity)                                       AS jars_lost,
        sum(dt.total_cost)                                     AS total_cost,
        sum(dt.total_cost) / sum(dt.total_grams)               AS cost_per_gram
      FROM im_strain_detail dt
      WHERE dt.ATTR1 = 'LOST' AND dt.posper_product_id IN ('shake35', 'crumb35')
            AND date(dt.start_date) >= :startDate AND date(dt.start_date) <= :endDate) t2
WHERE t2.total_grams IS NOT NULL
UNION ALL
SELECT
  'EXTRACT'                                AS type,
  ty.name                                  AS strain,
  op.name                                  AS 'option',
  ti.tier                                  AS tier,
  dt.grams_per_jar                         AS grams_per_jar,
  sum(dt.quantity)                         AS jars_lost,
  sum(dt.total_grams)                      AS total_grams,
  sum(dt.total_cost)                       AS total_cost,
  sum(dt.total_cost) / sum(dt.total_grams) AS cost_per_gram
FROM im_strain_detail dt, im_strain_extract_type ty, im_strain_extract_cost ti, posper_product pr, posper_category ca1,
  posper_category ca2, im_strain_category_option co LEFT JOIN im_strain_option op
    ON op.id = co.option_id
WHERE ca1.parent_id = ca2.id AND co.category_id = ca2.id AND dt.posper_product_id = pr.id AND pr.category_id = ca1.id
      AND ty.category_id = ca1.id AND ty.extract_cost_id = ti.id AND ty.active = 1 AND dt.ATTR1 = 'LOST'
      AND date(dt.start_date) >= :startDate AND date(dt.start_date) <= :endDate
GROUP BY ca2.id, ti.tier, dt.grams_per_jar
ORDER BY strain, tier DESC, grams_per_jar DESC;
        ]]>
    </entry>

    <entry key="ticketList">
        <![CDATA[
SELECT
  t4.id                            AS ID,
  t4.visibleId                     AS visibleId,
  DATE_FORMAT(t4.date, '%Y-%m-%d') AS 'date',
  DATE_FORMAT(t4.time, '%H:%i:%s') AS 'time',
  t5.cash + t5.cashless_atm        AS total,
  t5.cash                          AS cash,
  t5.cashless_atm                  AS cashless_atm,
  t4.name                          AS NAME,
  t4.userid                        AS user_id
FROM (SELECT
        ti.id,
        ti.visibleId,
        date(ti.dateClose) AS date,
        time(ti.dateClose) AS time,
        upper(us.name)     AS name,
        us.id              AS userid
      FROM posper_ticket ti, posper_user us
      WHERE ti.dateClose IS NOT NULL AND us.id = ti.userid
            AND date(ti.dateClose) = :date AND time(ti.dateClose) >= :timeStart AND
            time(ti.dateClose) <= :timeEnd) t4 JOIN
  (SELECT
     t1.id,
     t1.visibleId,
     total - cashless_atm AS cash,
     cashless_atm
   FROM
     (SELECT
        ti.id,
        ti.visibleId,
        sum(tl.priceSell * tl.amount * (1 + ta.rate)) AS total
      FROM posper_tax ta, posper_ticket ti LEFT JOIN posper_ticketline tl
          ON tl.ticket_ticketline = ti.id
      WHERE
        ti.dateClose IS NOT NULL AND ta.id = 1 AND date(ti.dateClose) = :date AND time(ti.dateClose) >= :timeStart AND
        time(ti.dateClose) <= :timeEnd
      GROUP BY ti.visibleId) t1 JOIN
     (SELECT
        id,
        visibleId,
        if(sum(cash) IS NULL, 0, sum(cash)) + if(sum(refund) IS NULL, 0, sum(refund)) AS cash,
        if(sum(cashless_atm) IS NULL, 0, sum(cashless_atm))                           AS cashless_atm
      FROM (
             SELECT
               ti.id,
               ti.visibleId,
               CASE WHEN pa.method = 'cash'
                 THEN pa.amount END AS cash,
               CASE WHEN pa.method = 'cheque'
                 THEN pa.amount END AS cashless_atm,
               CASE WHEN pa.method = 'cashrefund'
                 THEN pa.amount END AS refund
             FROM posper_ticket ti, posper_payment pa
             WHERE ti.dateClose IS NOT NULL AND pa.ticket_id = ti.id
                   AND date(ti.dateClose) = :date AND time(ti.dateClose) >= :timeStart AND
                   time(ti.dateClose) <= :timeEnd) t2
      GROUP BY visibleId) t3
       ON t1.visibleId = t3.visibleId) t5
    ON t4.visibleId = t5.visibleId
WHERE t4.userid IN (:userIds)
ORDER BY t4.time;
        ]]>
    </entry>

    <entry key="getUnits">
        <![CDATA[
SELECT
  'FLOWER'                          AS type,
  ca2.category_name                 AS strain,
  op.name                           AS 'option',
  ti.tier_name                      AS tier,
  count(*)                          AS units,
  sum(ud.price_per_unit)            AS total_cost,
  sum(ud.price_per_unit) / count(*) AS cost_per_unit
FROM im_strain_units ut, im_strain_units_details ud, posper_category ca1, posper_category ca2, im_strain_type ty,
  im_strain_tier ti, im_strain_category_option co LEFT JOIN im_strain_option op
    ON op.id = co.option_id
WHERE ud.im_strain_units_id = ut.id AND ut.posper_category_id = ca1.id AND ca1.parent_id = ca2.id AND
      co.category_id = ca2.id
      AND ca1.id = ty.posper_category_id AND ty.im_strain_tier_id = ti.id AND ud.status != 1 AND ud.ATTR1 IS NULL
GROUP BY ca2.category_name, op.name, ti.tier_name
UNION ALL
SELECT
  'EXTRACT'                                           AS type,
  ca2.category_name                                   AS strain,
  op.name                                             AS 'option',
  ti.tier                                             AS tier,
  sum(ud.grams)                                       AS units,
  sum(ud.grams) * sum(ud.total_price) / sum(ud.grams) AS total_cost,
  sum(ud.total_price) / sum(ud.grams)                 AS cost_per_unit
FROM im_strain_extract_details ud, posper_category ca1, posper_category ca2, im_strain_extract_type ty,
  im_strain_extract_cost ti, im_strain_category_option co LEFT JOIN im_strain_option op
    ON op.id = co.option_id
WHERE ud.posper_category_id = ca1.id AND ca1.parent_id = ca2.id AND co.category_id = ca2.id
      AND ca1.id = ty.category_id AND ty.extract_cost_id = ti.id AND ud.status != 1 AND ud.ATTR1 IS NULL
GROUP BY ca2.category_name, op.name, ti.tier
ORDER BY strain, 'option', tier DESC;
        ]]>
    </entry>

    <entry key="getBags">
        <![CDATA[
SELECT
  ud.id             AS id,
  ud.visibleId      AS visibleId,
  ud.price_per_unit AS price_per_unit,
  ti.tier_name      AS tier_name,
  ca.id             AS category_id,
  ca2.id            AS parent_category_id,
  ca2.category_name AS category_name
FROM im_strain_units_details ud, im_strain_units ut, posper_category ca, posper_category ca2, im_strain_type ty,
  im_strain_tier ti
WHERE ud.status = :status AND CASE WHEN :attr1 IS NOT NULL
  THEN ud.ATTR1 = :attr1
                              ELSE ud.ATTR1 IS NULL END AND ud.im_strain_units_id = ut.id AND
      ut.posper_category_id = ca.id
      AND ty.posper_category_id = ca.id AND ty.im_strain_tier_id = ti.id AND ca.parent_id = ca2.id
ORDER BY ud.visibleId;
        ]]>
    </entry>

    <entry key="getExtracts">
        <![CDATA[
SELECT
  ed.id             AS id,
  ed.visibleId      AS visibleId,
  ed.price_per_gram AS price_per_gram,
  ec.tier           AS tier,
  ed.grams          AS grams,
  ca.id             AS category_id,
  ca2.id            AS parent_category_id,
  ca2.category_name AS category_name
FROM im_strain_extract_details ed, posper_category ca, posper_category ca2, im_strain_extract_type et,
  im_strain_extract_cost ec
WHERE ed.location_id = :restaurantId AND ed.status = :status AND ed.posper_category_id = ca.id AND ca.parent_id = ca2.id
      AND et.category_id = ca.id AND et.extract_cost_id = ec.id AND CASE WHEN :attr1 IS NULL
  THEN ed.ATTR1 IS NULL
                                                                    ELSE
                                                                      ed.ATTR1 = :attr1
END
ORDER BY ed.visibleId;
        ]]>
    </entry>

    <entry key="empty">
        <![CDATA[
        ]]>
    </entry>
</properties>